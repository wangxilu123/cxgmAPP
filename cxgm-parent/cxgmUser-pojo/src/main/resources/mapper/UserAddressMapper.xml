<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cxgm.dao.UserAddressMapper">
  <resultMap id="BaseResultMap" type="com.cxgm.domain.UserAddress">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="real_name" jdbcType="VARCHAR" property="realName" />
    <result column="area" jdbcType="VARCHAR" property="area" />
    <result column="longitude" jdbcType="VARCHAR" property="longitude" />
    <result column="dimension" jdbcType="VARCHAR" property="dimension" />
    <result column="is_def" jdbcType="INTEGER" property="isDef" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="yn" jdbcType="INTEGER" property="yn" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, address, phone, real_name, area, longitude, dimension,is_def,remarks,yn
  </sql>
  <select id="selectByExample" parameterType="com.cxgm.domain.UserAddressExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.cxgm.domain.UserAddressExample">
    delete from user_address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.cxgm.domain.UserAddress" useGeneratedKeys="true">
    insert into user_address (user_id, address, phone, 
      real_name, area, longitude, dimension,is_def,remarks,yn)
    values (#{userId,jdbcType=INTEGER}, #{address,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{realName,jdbcType=VARCHAR}, #{area,jdbcType=VARCHAR}, #{longitude,jdbcType=VARCHAR}, #{dimension,jdbcType=VARCHAR},#{isDef,jdbcType=INTEGER}, #{remarks,jdbcType=VARCHAR},1)
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.cxgm.domain.UserAddress" useGeneratedKeys="true">
    insert into user_address
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="realName != null">
        real_name,
      </if>
      <if test="area != null">
        area,
      </if>
      <if test="longitude != null">
        longitude,
      </if>
      <if test="dimension != null">
        dimension,
      </if>
       <if test="isDef != null">
        is_def,
      </if>
      <if test="remarks != null">
        remarks,
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.cxgm.domain.UserAddressExample" resultType="java.lang.Long">
    select count(*) from user_address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_address
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.realName != null">
        real_name = #{record.realName,jdbcType=VARCHAR},
      </if>
      <if test="record.area != null">
        area = #{record.area,jdbcType=VARCHAR},
      </if>
      <if test="record.longitude != null">
        longitude = #{record.longitude,jdbcType=VARCHAR},
      </if>
      <if test="record.dimension != null">
        dimension = #{record.dimension,jdbcType=VARCHAR},
      </if>
       <if test="record.isDef != null">
        is_def = #{record.isDef,jdbcType=INTEGER},
      </if>
      <if test="record.remarks != null">
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
       <if test="record.yn != null">
        yn = #{record.yn,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_address
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      address = #{record.address,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      real_name = #{record.realName,jdbcType=VARCHAR},
      area = #{record.area,jdbcType=VARCHAR},
      longitude = #{record.longitude,jdbcType=VARCHAR},
      dimension = #{record.dimension,jdbcType=VARCHAR},
      is_def = #{record.isDef,jdbcType=INTEGER},
      remarks = #{record.remarks,jdbcType=VARCHAR},
      yn = #{record.yn,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  
   <update id="updateByPrimaryKey" parameterType="com.cxgm.domain.UserAddress">
    update user_address
    set user_id = #{record.userId,jdbcType=INTEGER},
      address = #{record.address,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      real_name = #{record.realName,jdbcType=VARCHAR},
      area = #{record.area,jdbcType=VARCHAR},
      longitude = #{record.longitude,jdbcType=VARCHAR},
      dimension = #{record.dimension,jdbcType=VARCHAR},
      is_def = #{record.isDef,jdbcType=INTEGER},
      remarks = #{record.remarks,jdbcType=VARCHAR},
      yn = #{record.yn,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>